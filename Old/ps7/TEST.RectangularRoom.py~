import math
import random

class Position(object):
    """
    A Position represents a location in a two-dimensional room.
    """
    def __init__(self, x, y):
        """
        Initializes a position with coordinates (x, y).
        """
        self.x = x
        self.y = y
        
    def getX(self):
        return self.x
    
    def getY(self):
        return self.y
    
    def getNewPosition(self, angle, speed):
        """
        Computes and returns the new Position after a single clock-tick has
        passed, with this object as the current position, and with the
        specified angle and speed.

        Does NOT test whether the returned position fits inside the room.

        angle: number representing angle in degrees, 0 <= angle < 360
        speed: positive float representing speed

        Returns: a Position object representing the new position.
        """
        old_x, old_y = self.getX(), self.getY()
        angle = float(angle)
        # Compute the change in position
        delta_y = speed * math.cos(math.radians(angle))
        delta_x = speed * math.sin(math.radians(angle))
        # Add that to the existing position
        new_x = old_x + delta_x
        new_y = old_y + delta_y
        return Position(new_x, new_y)

    def __str__(self):  
        return "(%0.2f, %0.2f)" % (self.x, self.y)
        #return (self.x, self.y)

class RectangularRoomTest(object):
    def __init__(self, width, height):
        self.width  = width
        self.height = height

    def getNumTiles(self):
        #NumTiles = self.width * self.height #so when DO I use "self"?
        #return NumTiles
        #This also works. So when do I use 'self' and not use it?
        self.NumTiles = self.width * self.height #so when DO I use "self"?
        return self.NumTiles

    def getRandomPosition(self):
        """
        Return a random position inside the room.

        returns: a Position object.
        """
        random_x = random.randint(0,self.width)
        random_y = random.randint(0,self.height)
        return Position(random_x, random_y)
        #raise NotImplementedError

    def isPositionInRoom(self, pos):
        """
        Return True if pos is inside the room.

        pos: a Position object.
        returns: True if pos is in the room, False otherwise.
        """
        print 'x coordinate: ',pos.getX()
        return (pos.getX <= self.width) and (pos.getY <= self.height)
        #self.posX = pos.getX
        #self.posY = pos.getY
        #return (testPosition.getX() <= self.posX()) and (testPosition.getY() <= self.posY())
        #raise NotImplementedError
    
room = RectangularRoomTest(5,10) #initializes room with (5,10) dimensions
print 'Dimensions of room: ',room.width, room.height #there are no getX & getY methods, so have to access directly
print 'Random position in room =',room.getRandomPosition() #doesn't really make sense since it has no dependency on current room object. But hey, it's part of the class.
print 'Room Tiles =',room.getNumTiles() #straightforward, empty parentheses since room is explicity stated
testPosition = Position(3,4) #instantiating an object of the Position class with arguments 3,4
print testPosition.__str__() #testPosition object calling __str__ method
room.isPositionInRoom(testPosition)
print 'Position in room:',room.isPositionInRoom(testPosition)


        
